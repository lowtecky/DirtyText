{"name":"Dirtytext","tagline":"Styled atomic (readonly) text-blocks inside an otherwise editable text box. These text-blocks behave like single characters when using the text box. Highly useful for creating user-friendly templates that contain variables.","body":"DirtyText\r\n=========\r\n\r\n![](https://raw.github.com/zone117x/DirtyText/master/screenshot.png \"Screenshot\")   _(screenshot)_\r\n\r\nThis jQuery plugin allows the use of styled atomic (readonly) text-blocks inside an otherwise editable text box. These text-blocks behave like single characters when using the text box. Highly useful for creating user-friendly templates that contain variables. \r\n\r\nWhen your users are creating a template and need to insert variables into a textarea, you would typically instruct them to create a string with some syntax such as:\r\n\r\n```\r\nHello {contact first name}, this is {my first name}...\r\n```\r\nHowever, this is often a confusing and unintuitive user experience - particularly for any unsavvy users.\r\nWe couldn't find any existing solutions for this problem so we built our own. We find it too useful to keep it to ourselves!\r\n\r\n\r\n\r\nExample\r\n-----\r\n\r\nView a demonstration at http://shared.zone117x.com/dirtyText/example.html\r\n\r\n\r\n\r\nUsage\r\n-----\r\n```html\r\n<head>\r\n    <script src=\"http://code.jquery.com/jquery-1.9.1.min.js\"></script>\r\n    \r\n    <!-- Requires only dirtytext.js & dirtytext.css -->\r\n    <script src=\"dirtytext.js\"></script>\r\n    <link rel=\"stylesheet\" href=\"dirtytext.css\"/>\r\n    \r\n</head>\r\n<body>\r\n    <div id=\"menu\"></div>\r\n    <div id=\"template\"></div>\r\n    <div id=\"preview\"></div>\r\n</body>\r\n\r\n<script type=\"text/javascript\">\r\n    $(function () {\r\n\r\n        var tags = {\r\n            '{my email}': 'my email',\r\n            '{my phone}': 'my phone',\r\n            '{my first name}': 'my first name',\r\n            '{my last name}': 'my last name',\r\n            '{contact first name}': 'contact first name',\r\n            '{contact last name}': 'contact last name'\r\n        };\r\n\r\n        //For each tag, create a button with the data-key & data-val attributes used by DirtyText.\r\n        //DirtyText can take these buttons and apply the click & drag events used to interact with the text area\r\n        for (var key in tags) {\r\n            $('#menu').append(\r\n                $('<button/>').attr('data-key', key).attr('data-val', tags[key]).text(tags[key])\r\n            );\r\n        }\r\n\r\n        $('#template').dirtyText({\r\n            tags: tags,\r\n            menu: $('#menu').children(),\r\n            text: \"Hi {contact first name} {contact last name}, please call me at {my phone}.\",\r\n            change: function (text) {\r\n                $('#preview').text(text);\r\n            }\r\n        });\r\n\r\n    })\r\n</script>\r\n```\r\n\r\n\r\n\r\n### Options\r\n\r\n\r\nThe initialization options are:\r\n\r\n * ```tags```: key-value object used to build each atomic text-block. _required_\r\n * ```liveRender```: if true, any manually entered keys will be automatically rendered. _default: true_\r\n * ```text```: initial text that can contain keys which will be rendered to be. _default: ''_\r\n * ```change```: callback that returns the parsed changed text. _default: null_\r\n * ```menu```: jQuery object of elements with data-key & data-val attributes. Click & drag events are added for interaction with the text area. _default: null_\r\n\r\n\r\n\r\n\r\n### Methods\r\n\r\n * ```.dirtyText('parse')``` returns the text containing keys.\r\n * ```.dirtyText('clear')``` empties the text area.\r\n * ```.dirtyText('set', string)``` populates and renders the text area with a specified string that can contain keys.\r\n * ```.dirtyText('render')``` renders any key strings as atomic text-blocks (useless if `liveRender` option is true).\r\n\r\n\r\n\r\n### Styling\r\n\r\nStyling of the atomic text-blocks can be done by editing the `.dirtyText > hr:after` selector in `dirtytext.css`\r\n\r\n\r\n\r\n### Compatibility\r\n\r\n`March 2013` Tested and working in latest versions of Chrome, Firefox, Opera (drag & drop unsupported), Safari, and IE8+\r\n\r\n\r\n\r\n\r\n\r\nHow does it work?\r\n-----\r\n\r\nA container element (such as a div) is applied the [`contentEditable`](https://developer.mozilla.org/en-US/docs/HTML/Content_Editable) attribute so it can behave like a textarea element yet still contain child elements. \r\n\r\nNow lets insert our styled text-block: we could try something like `<span class='variable'>my email</span>`, however the inner-text is still editable. \r\n\r\nWe can create readonly text to overcome this by using the CSS [`:after pseudo-element`](https://developer.mozilla.org/en-US/docs/CSS/::after) in conjunction with [`content: attr()`](https://developer.mozilla.org/en-US/docs/CSS/attr)\r\n\r\nNow the tricky part is finding a suitable HTML element which is not allowed to contain any [`text nodes`](https://developer.mozilla.org/en-US/docs/Whitespace_in_the_DOM). \r\nThe tag also needs to be able to properly display as inline-block and allow an :after pseudo-element. \r\n\r\nWe discovered such a holy grail element: the [`singleton tag`](http://webdesign.about.com/od/htmltags/qt/html-void-elements.htm) known as `hr`.\r\n\r\nYes that's right - the often forgotten, good ol' [`horizontal rule element`](https://developer.mozilla.org/en-US/docs/HTML/Element/hr). \r\nThus far, the hr is the only element we have found which works for this purpose. We apply some basic CSS resets to the element and it works like a charm. Who would have though? \r\n\r\n\r\n\r\n\r\nLicense\r\n-----\r\n\r\n__DirtyText__ is released under the MIT license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}